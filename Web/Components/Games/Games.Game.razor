@using System.Linq

@code {

    [Parameter] public GamesModel? Data { get; set; }

    private Dictionary<string, string> _icons = new()
    {
        { "steam", "<svg width=\"21px\" height=\"21px\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C7.4,22 3.55,18.92 2.36,14.73L6.19,16.31C6.45,17.6 7.6,18.58 8.97,18.58C10.53,18.58 11.8,17.31 11.8,15.75V15.62L15.2,13.19H15.28C17.36,13.19 19.05,11.5 19.05,9.42C19.05,7.34 17.36,5.65 15.28,5.65C13.2,5.65 11.5,7.34 11.5,9.42V9.47L9.13,12.93L8.97,12.92C8.38,12.92 7.83,13.1 7.38,13.41L2,11.2C2.43,6.05 6.73,2 12,2M8.28,17.17C9.08,17.5 10,17.13 10.33,16.33C10.66,15.53 10.28,14.62 9.5,14.29L8.22,13.76C8.71,13.58 9.26,13.57 9.78,13.79C10.31,14 10.72,14.41 10.93,14.94C11.15,15.46 11.15,16.04 10.93,16.56C10.5,17.64 9.23,18.16 8.15,17.71C7.65,17.5 7.27,17.12 7.06,16.67L8.28,17.17M17.8,9.42C17.8,10.81 16.67,11.94 15.28,11.94C13.9,11.94 12.77,10.81 12.77,9.42A2.5,2.5 0 0,1 15.28,6.91C16.67,6.91 17.8,8.04 17.8,9.42M13.4,9.42C13.4,10.46 14.24,11.31 15.29,11.31C16.33,11.31 17.17,10.46 17.17,9.42C17.17,8.38 16.33,7.53 15.29,7.53C14.24,7.53 13.4,8.38 13.4,9.42Z\" /></svg>" },
        { "epic games", "<svg width=\"21px\" height=\"21px\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M4.2443,1c-1.26,0-1.7221.4654-1.7221,1.7221V17.9034c0,.1437.0076.2757.0186.3981a1.3294,1.3294,0,0,0,.2894.8449,3.4762,3.4762,0,0,0,.2833.2255c.1395.068.2358.1182.3932.1822l7.6412,3.2008a1.6978,1.6978,0,0,0,.849.244H12a1.6927,1.6927,0,0,0,.8525-.244L20.49,19.5541c.1615-.064.2537-.1149.3966-.1822,0,0,.2585-.1973.2833-.2255a1.3213,1.3213,0,0,0,.2894-.8449c.011-.1217.0186-.2537.0186-.3939V2.7228c0-1.2567-.4654-1.7221-1.7221-1.7221ZM16.4868,3.85h.6221A1.3643,1.3643,0,0,1,18.6564,5.408V7.13h-1.26V5.4754c0-.3362-.154-.49-.4806-.49h-.2145a.426.426,0,0,0-.49.49v5.3272a.426.426,0,0,0,.49.49h.24c.3217,0,.4757-.154.4757-.49V8.8976h1.26v1.9662A1.3759,1.3759,0,0,1,17.12,12.4285h-.6331a1.3769,1.3769,0,0,1-1.5585-1.5647V5.417a1.3777,1.3777,0,0,1,1.5585-1.5681ZM5.3147,3.9224H8.1684V5.0932H6.5962V7.4773H8.1113v1.168H6.5962v2.5416H8.19v1.1714H5.3147Zm3.4979,0h2.0129A1.3782,1.3782,0,0,1,12.3826,5.49V7.7317a1.3765,1.3765,0,0,1-1.5571,1.5647h-.7267v3.0612H8.8126Zm4.15,0h1.2814v8.4359H12.9628ZM10.0947,5.0567V8.1641h.53c.3224,0,.4764-.1567.4764-.4943V5.55c0-.3361-.154-.4942-.4764-.4942ZM6.56,14.3623h.19l.0433.0076h.0687l.0358.011h.0357l.0323.01.0358.0075.0282.0076.0639.0144.0364.01.0248.0076.0282.011.0357.011.0248.01.0364.0145.0323.0144.0282.0172.0323.0144.0248.0172.0364.0186.0282.0171.0282.0145.0281.0213.03.0186.0248.0213.0859.0653-.022.0282-.0248.0247-.022.0255-.0247.0281-.0172.0248-.022.0254-.0247.0248-.022.0282-.0172.0247-.0255.03-.0213.0247-.0247.0282-.022.0254-.0172.0282-.0254.0248-.0214.03-.0247.0248-.022.0247-.0247-.0172-.0282-.0254-.03-.0172-.0529-.0357-.0323-.0186-.03-.0172L7.0286,15.05l-.0248-.0145-.0281-.0137L6.9179,15l-.0357-.0062-.0282-.0076-.0323-.0075-.0365-.0076L6.75,14.9673H6.7137L6.6718,14.96H6.603l-.0357.0034H6.5315l-.0357.011-.0282.0076-.0323.011-.0323.0062-.03.0144-.0357.0145-.05.0357-.03.0172-.0247.022-.0248.0172-.0254.022-.0172.0247-.03.0248-.0357.05L6.084,15.27l-.0144.0323-.0172.0254-.0186.0323-.011.0323-.0137.0282-.011.0358-.0035.0357-.01.033-.0075.0358v.0357l-.0035.0358v.0824l.0035.0358v.0282l.0034.0357.0062.0323.011.0282.0034.0365.011.0281.01.0248L6.0366,16l.0185.0358.0138.0254.0357.0571.022.0282.0172.0254.03.0213.0172.0248.0247.022.0578.0433.0247.0137.0282.0186.033.0144.0357.0138.0248.0144.0715.0213.0323.0035.0357.011.0358.0034h.154l.0433-.0034h.0323l.0364-.0145.0358-.0034.0357-.01.0282-.0076.0323-.0144L7.021,16.33l.0323-.0144.022-.0144.0282-.0172v-.319H6.5982v-.5115H7.74v1.146l-.0247.0172-.0248.0213-.0254.0186-.0282.0213-.0282.0144-.0247.022-.0578.0358-.0357.0172-.0571.0357-.0364.0144-.0282.0138-.0323.0144-.0715.0282-.0282.0145-.0653.0213-.0323.0075-.0323.011-.0358.011-.0282.0062-.1072.022-.033.0035-.0715.0075-.0392.0035-.0358.0027-.0391.0034H6.5384l-.0357-.0061H6.4669l-.0357-.0076H6.3989l-.0358-.011-.1045-.0213-.0282-.011-.0323-.0035-.0357-.0144-.0653-.0213-.064-.0282-.0357-.0144-.0248-.0145-.0357-.0137-.0255-.022-.0357-.0138-.0213-.0185-.0282-.0172-.0577-.0433L5.74,16.6873l-.022-.0213L5.69,16.644l-.0468-.0461-.0247-.022-.0213-.0247-.0255-.0254-.0171-.0282-.022-.0213-.0172-.03-.022-.0282-.0172-.0247-.0186-.0282-.0172-.033-.0144-.0282-.0144-.0323-.0138-.0282L5.37,16.1786l-.011-.0248-.0144-.0323-.0076-.0323-.0062-.0282-.0075-.0357-.011-.033-.0076-.0358-.0034-.0282-.0062-.0357-.0076-.0639L5.28,15.7572v-.19l.0075-.0364v-.0358l.011-.0357v-.0358l.01-.0323.011-.0357.0145-.0639.01-.0358.011-.0323.0433-.0969.0137-.0282.0145-.0323.0185-.033.0138-.0282.0186-.0248.0357-.0577.0213-.0282.022-.0248.0172-.0281.0468-.0468.0213-.0254.0254-.0248.0213-.0247.03-.022.05-.0433.0282-.0213.0295-.0186.0248-.0213.0282-.0186.03-.0137.0323-.0186.0358-.0172.0247-.0185.0358-.0138.0323-.0144.0323-.0172.03-.0076.0357-.011.0282-.0144.0323-.0062.0323-.011.0358-.0076.03-.011L6.36,14.385h.0357l.0323-.01h.0358L6.5,14.3671h.0323ZM17.55,14.37h.19l.0433.0075h.0681l.0357.01h.0392l.0358.011.0639.0145.0358.0075.0323.0062.0364.011.0323.011.0282.0076.0323.01.0358.011.0281.0144.0358.0138.033.0144.0323.0186.0248.0137.0323.0186.0323.0137.0295.0186.0323.0213.0248.0186.0577.0433.0282.0172-.022.0282-.0172.0295-.0213.0248-.022.0282-.0172.0323-.0185.03-.0213.0248-.022.0282-.0172.0295-.022.0282-.0172.0248-.022.0281-.0172.033-.022.0282-.0213.0248-.022.0282-.0172.03-.0282-.022-.033-.0172-.0247-.0185-.0282-.0172-.0323-.0144-.03-.0186-.0323-.0138-.0247-.0144-.0358-.0137-.0254-.0145-.0282-.011-.0639-.0213-.0715-.022-.1073-.0213-.0357-.0034-.0653-.0076h-.075l-.0392.0076-.0357.0075-.0323.0076-.0282.0137-.0254.0145-.0282.0247-.0213.0323-.0145.033v.0853l.0186.0392.0137.022.022.0213.0358.0185.0282.0172.0323.0145.0357.0137.0468.011.0247.011.03.0076.0357.0075.0282.01.0323.0076.0392.011.0358.011.0392.01.0391.0076.0324.011.0391.01.0358.0075.0323.0076.1079.0323.0282.011.0358.011.0323.0138.0357.0185.0715.0282.0323.0186.0578.0357.0529.0392.033.0213.0248.0248.0247.03.0254.0248L18.6,15.77l.0255.0358.0172.0254.0144.0358.0137.0213.011.0357.011.03.0076.0323.0138.0715.0034.0357.0034.0324v.0859l-.0034.0392-.0076.0715-.0075.0357-.01.0323-.0076.0358-.011.0357-.01.0323-.0145.0255-.0144.0323-.0172.0282-.022.0254-.0357.0571-.0433.05-.0248.0171-.0282.0255-.022.0213-.0282.0213-.0281.0144-.0282.022-.033.0172-.064.0323-.0357.0145-.0323.0137-.0358.011-.0323.011-.0295.0076-.0715.0137-.0248.0076-.0357.0076h-.0358l-.0323.0075h-.0357l-.0358.0076h-.255l-.1073-.011-.0357-.0076-.0323-.0034-.0715-.0138-.0392-.0075-.0323-.0076-.0358-.011-.0364-.0076-.0323-.01-.0358-.011-.0357-.0144-.0282-.01-.0358-.011-.0357-.0145-.0255-.0137-.0357-.011-.0282-.0186-.0357-.0137-.0282-.0186-.0255-.0172-.0357-.0185-.0248-.0138-.0281-.022-.0282-.0172-.03-.022-.0247-.0213-.0282-.022-.0255-.0172-.0281-.0254.022-.0282.0247-.0247.0213-.0255.0255-.0281.0171-.0248.022-.0282.0248-.0254.0213-.0248.0254-.0282.0172-.0254.0255-.0247.0213-.0282.022-.0255.0247-.0281.0172-.0248.0254-.0254.0248-.0282.0247.022.033.0213.0248.0213.0357.0186.0248.0185.0323.0213.0295.0186.0324.0138.0247.0185.0323.01.0358.0145.0295.0144.0323.01.0282.0144.0358.011.0323.01.0357.011.0358.0034.033.011.0357.0034h.0392l.0323.01h.1932l.0323-.0061.0358-.0076.0247-.0034.03-.011.0247-.0138.0323-.022.0186-.0247.0137-.0282.011-.033V16.19l-.0144-.0323-.0172-.0282-.022-.0213-.0323-.022-.0247-.01-.0323-.0145-.0358-.0144-.0392-.0172-.0254-.0076-.0282-.0075-.0358-.011-.0247-.0062-.0357-.011-.0358-.0035L17.6,15.9689l-.0358-.0034-.0392-.01-.0323-.0076-.0357-.011-.0358-.0076-.0357-.01-.0323-.011L17.3172,15.9l-.0282-.011-.0653-.0213-.0357-.0145-.0358-.01-.0715-.03-.0323-.0171-.0357-.0186-.0248-.0172-.033-.0186-.0247-.0171-.0323-.0186-.0468-.0467-.0247-.0214-.0433-.05-.0186-.0248-.0138-.0247-.022-.033-.01-.0248-.033-.0859-.0062-.0358-.0075-.0323v-.0323l-.0076-.0357v-.1465l.0076-.0715.0075-.03.0062-.0323.011-.0282.0076-.0358.0144-.0247.0138-.0365.0144-.0281L16.76,14.79l.0185-.0247.0248-.0282.0185-.03.0282-.0247.0213-.0248.022-.03.0324-.0248.0219-.0186.0282-.0213.0571-.0357.0323-.0186.0653-.0323.0282-.01.0323-.011.0358-.0144.0357-.01.0254-.0076.0324-.0076.0281-.0075.0324-.0076.0357-.0076.0715-.0061.033-.0035Zm-8.4682.0247H9.73l.03.0653.0138.0282.011.0358.0144.0323.01.0282.0186.0323.0213.0653.0185.0323.0282.0639.0076.0282.057.1292.011.0324.0145.03.0172.0323.0075.0323.0186.0358.0062.0323.033.0639.0137.0255.0145.0357.011.0358.01.0247.0185.0358.011.03.0138.0358.011.0247.0144.0358.0323.0639.01.0323.0076.033.0144.0323.0172.0282.0145.0358.0144.0323.01.0282.03.0653.01.0323.0144.0323.011.0323.0138.0282.0185.033.0138.0323.0144.0282.0076.0357.0282.064.0144.03.01.0323.03.064.0172.0357.0075.0282.0186.0364.0062.0248.0144.0357.0186.0358.0137.0247.011.0358.0145.03.01.0357.0185.0247.0213.0715.0145.0255.0137.0357.0186.0282.0144.0358.0062.0323.011.0282.0145.0323.0171.0295h-.7156l-.0172-.0295-.011-.0323-.0144-.0323-.0138-.0358-.0075-.0282-.03-.0639-.01-.03-.0282-.0639-.011-.0282L9.9318,16.56,9.91,16.4941,9.896,16.466H8.9006l-.0138.0323-.011.0295-.0144.0358-.0138.0323-.0075.0282-.0145.0357-.0137.0282-.011.0323-.0145.03-.0137.0357-.011.0248-.0144.0357-.01.0358-.0144.0254-.011.0358H8.0027l.01-.033.03-.064.01-.0357.011-.0282.0186-.0323.0137-.0323.0145-.03.0075-.0323L8.132,16.62l.0185-.0281.0138-.0323.022-.0654.0323-.0639.011-.0323.0137-.0282.011-.033.0433-.0962.0145-.0358.01-.0282.011-.0323.0186-.03.0137-.0358.011-.0323.011-.0282.0138-.0357.0185-.0255.011-.0357.0138-.0282.011-.0323.0144-.0358.0172-.0282.011-.0357.0137-.0254.011-.0358.0145-.0357.0137-.0248.0145-.0357.011-.03.0137-.0357.011-.0248.0186-.0357.0137-.0358.0145-.0282.0075-.0323.0138-.033.0185-.0323.0138-.0282.0075-.0357.0145-.0323.0144-.03.0282-.0639.01-.0282.03-.0715.0137-.0255.0145-.0357.011-.0282.01-.0357L8.87,14.87l.0186-.0281.0137-.0358.011-.0254.011-.0358.0138-.0282.0185-.0323.011-.0357.01-.03.0145-.0357.0137-.0248.0186-.0357.011-.0358.01-.0247.0144-.0358Zm2.0129.0186h.7087l.022.0282.0358.0577.0172.0323.0185.0248.0172.0323.0186.0282.0172.033.0185.0281.0172.0248.0186.0323.0172.03.0254.0282.01.0281.022.0324.0172.03.022.0248.0144.0323.0172.0282.022.03.01.0282.0255.0323.0529.086.0144.0281.0214.0282.0185.0282.0172.033.0543.0853.0172.033.0186.0281.0213-.0281.0144-.0365.0213-.0247.0186-.0323.0172-.0248.0144-.0357.0248-.0255.0185-.0323.0145-.0247.0171-.03.022-.0323.0172-.0248.0186-.0357.0172-.0248.022-.0329.0137-.0248.0186-.0357.0172-.0214.0185-.0295.0213-.0358.0186-.0247.0138-.0323.022-.0255.0171-.0357.0186-.0213.0213-.0282.0186-.0358.0172-.0254.0185-.0323.0172-.0248.0186-.0357.0213-.0254.0144-.0324.0186-.0247h.72v2.5567H13.092V15.4643l-.0171.0254-.022.0358-.0172.0213-.022.0282L13,15.6107l-.022.0255-.0172.0247-.022.0358-.0357.05-.0213.0281-.0186.0358-.0213.0254-.0186.0248-.0137.0357-.022.0248-.0172.0254-.022.0358-.0172.0247-.022.0282-.0172.0323-.0144.0254-.0213.0282-.0186.0323-.0213.0248-.022.03-.0137.0281-.0186.0324-.0213.0254-.022.0282-.0138.0357-.0254.0213-.0137.0282-.022.0365-.0172.0247h-.0145l-.0213-.0323-.0185-.03-.0172-.0323-.0186-.0247-.0213-.0323-.0186-.0282-.0213-.03-.0185-.0282-.0172-.0323-.0186-.0247-.0247-.033-.0145-.0282-.0213-.0323-.0185-.0248-.0172-.0323-.022-.03-.0172-.0358-.022-.0247-.0172-.0324-.0186-.03-.0171-.0323-.022-.0248-.0172-.0323-.022-.0282-.0138-.03-.022-.0282-.0172-.0323-.022-.0248-.0171-.033-.022-.0282-.0138-.0323-.0254-.0247-.0138-.033L11.76,15.46v1.5076h-.662V14.4359Zm3.1788,0H16.29V14.99H14.9427v.4118h1.21v.5444h-1.21v.4366h1.3639v.58h-2.03V14.4352Zm-4.8769.7837-.011.0323-.01.03-.0144.0357-.0145.0323-.01.0323-.0295.064-.0138.0357-.011.03-.011.0357-.0137.0248-.011.0357-.0145.0358-.0137.0254-.011.0357-.0138.0282-.011.0358-.0185.0323-.0076.0282-.0137.0357-.0145.033-.011.0282-.0137.0358h.59L9.68,15.9029l-.011-.0323L9.64,15.8053l-.011-.0323-.0145-.0282-.01-.0358L9.59,15.6767l-.011-.0323-.0138-.0295-.011-.0323L9.54,15.5468l-.01-.0282-.03-.0639-.0062-.033-.0144-.0323-.0144-.0358-.01-.0247-.03-.0715-.01-.0323ZM8.3444,19.9844h7.3428L11.9392,21.22Z\" /></svg>" },
        { "playstation", "<svg width=\"21px\" height=\"21px\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M9.5,4.27C10.88,4.53 12.9,5.14 14,5.5C16.75,6.45 17.69,7.63 17.69,10.29C17.69,12.89 16.09,13.87 14.05,12.89V8.05C14.05,7.5 13.95,6.97 13.41,6.82C13,6.69 12.76,7.07 12.76,7.63V19.73L9.5,18.69V4.27M13.37,17.62L18.62,15.75C19.22,15.54 19.31,15.24 18.83,15.08C18.34,14.92 17.47,14.97 16.87,15.18L13.37,16.41V14.45L13.58,14.38C13.58,14.38 14.59,14 16,13.87C17.43,13.71 19.17,13.89 20.53,14.4C22.07,14.89 22.25,15.61 21.86,16.1C21.46,16.6 20.5,16.95 20.5,16.95L13.37,19.5V17.62M3.5,17.42C1.93,17 1.66,16.05 2.38,15.5C3.05,15 4.18,14.65 4.18,14.65L8.86,13V14.88L5.5,16.09C4.9,16.3 4.81,16.6 5.29,16.76C5.77,16.92 6.65,16.88 7.24,16.66L8.86,16.08V17.77L8.54,17.83C6.92,18.09 5.2,18 3.5,17.42Z\" /></svg>" },
        { "xbox", "<svg width=\"21px\" height=\"21px\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M6.43,3.72C6.5,3.66 6.57,3.6 6.62,3.56C8.18,2.55 10,2 12,2C13.88,2 15.64,2.5 17.14,3.42C17.25,3.5 17.54,3.69 17.7,3.88C16.25,2.28 12,5.7 12,5.7C10.5,4.57 9.17,3.8 8.16,3.5C7.31,3.29 6.73,3.5 6.46,3.7M19.34,5.21C19.29,5.16 19.24,5.11 19.2,5.06C18.84,4.66 18.38,4.56 18,4.59C17.61,4.71 15.9,5.32 13.8,7.31C13.8,7.31 16.17,9.61 17.62,11.96C19.07,14.31 19.93,16.16 19.4,18.73C21,16.95 22,14.59 22,12C22,9.38 21,7 19.34,5.21M15.73,12.96C15.08,12.24 14.13,11.21 12.86,9.95C12.59,9.68 12.3,9.4 12,9.1C12,9.1 11.53,9.56 10.93,10.17C10.16,10.94 9.17,11.95 8.61,12.54C7.63,13.59 4.81,16.89 4.65,18.74C4.65,18.74 4,17.28 5.4,13.89C6.3,11.68 9,8.36 10.15,7.28C10.15,7.28 9.12,6.14 7.82,5.35L7.77,5.32C7.14,4.95 6.46,4.66 5.8,4.62C5.13,4.67 4.71,5.16 4.71,5.16C3.03,6.95 2,9.35 2,12A10,10 0 0,0 12,22C14.93,22 17.57,20.74 19.4,18.73C19.4,18.73 19.19,17.4 17.84,15.5C17.53,15.07 16.37,13.69 15.73,12.96Z\" /></svg>" }
    };

    private double _unlocked;
    private double _total;
    private double _percent;

    protected override void OnInitialized()
    {
        _unlocked = Data?.Achievements?.Count(a => a.Unlocked == true) ?? 0;
        _total = Data?.Achievements?.Count ?? 0;
        _percent = _total > 0 ? _unlocked / _total * 100 : 0;

        YearsElapsed();
    }

    private bool _achievementsOpen;

    private void ToggleAchievementsOpen()
    {
        _achievementsOpen = !_achievementsOpen;
    }

    private void AchievementsClosed(bool closed)
    {
        _achievementsOpen = closed;
        _dropdownOpen = false;
    }


    private int _yearsElapsed;

    private void YearsElapsed()
    {
        if (Data?.Purchased is null) return;
        if (!DateTime.TryParse(Data.Purchased, out var startDate)) return;
        _yearsElapsed = YearDifference(startDate, DateTime.Now);
    }

    private int YearDifference(DateTime start, DateTime end)
    {
        var years = end.Year - start.Year;
        if (end < start.AddYears(years))
        {
            years--;
        }

        return years;
    }


    private SortOption _currentSortOption = SortOption.Unlocked;
    private string _searchQuery = string.Empty;

    private IEnumerable<Achievements> SortedAchievements
    {
        get
        {
            var achievements = Data?.Achievements ?? Enumerable.Empty<Achievements>();
            if (!string.IsNullOrWhiteSpace(_searchQuery))
            {
                achievements = achievements.Where(a =>
                    (a.Title?.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (a.Description?.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ?? false));
            }

            achievements = _currentSortOption switch
            {
                SortOption.Unlocked => achievements.OrderByDescending(a => a.Unlocked),
                SortOption.Locked => achievements.OrderBy(a => a.Unlocked),
                SortOption.NameAscending => achievements.OrderBy(a => a.Title),
                SortOption.NameDescending => achievements.OrderByDescending(a => a.Title),
                _ => achievements
            };

            return achievements;
        }
    }

    private void ChangeSortOption(SortOption option)
    {
        _currentSortOption = option;
    }

    private void SetSearchQuery(string query)
    {
        _searchQuery = query;
    }


    private bool _dropdownOpen;

    private void ToggleDropdownOpen()
    {
        _dropdownOpen = !_dropdownOpen;
    }

    private void OutsideDropdownClick()
    {
        _dropdownOpen = false;
    }

}

<div class="games__container__game">
    @if (Data is not null)
    {
        <div class="games__container__game__wrapper">
            @if (Data.Banner is not null)
            {
                <div class="games__container__game__banner">
                    <img alt="@Data.Title banner" aria-hidden="true" class="games__container__game__banner__image" src="@Data.Banner">
                </div>
            }

            <div class="games__container__game__hero">
                <p class="games__container__game__hero__title">@Data.Title</p>
                <div class="games__container__game__hero__platforms">
                    @if (Data.Platforms is not null)
                    {
                        foreach (var platform in Data.Platforms)
                        {
                            if (platform.Title is null) continue;

                            <a class="games__container__game__hero__platforms__platform" href="@platform.Link" target="_blank">
                                @if (_icons.ContainsKey(platform.Title.ToLower()))
                                {
                                    @(new MarkupString(_icons[platform.Title.ToLower()]))
                                    <span class="visually_hidden">@platform.Title</span>
                                }
                                else
                                {
                                    <span>@platform.Title</span>
                                }
                            </a>
                        }
                    }
                </div>
            </div>

            <div class="games__container__game__content">
                <div class="games__container__game__content__stats">
                    <p class="games__container__game__content__stats__playtime">
                        <span class="games__container__game__content__stats__playtime__title">Hours played:</span> <span title="Last updated: @Data.LastUpdate">@Data.PlayTime</span>
                    </p>
                    <p class="games__container__game__content__stats__purchased">
                        <span class="games__container__game__content__stats__purchased__title">Purchased:</span> <span title="Years owned: @_yearsElapsed">@Data.Purchased</span>
                    </p>
                    @if (Data.Achievements is not null)
                    {
                        <p class="games__container__game__content__stats__achievements">
                            <span class="games__container__game__content__stats__achievements__title">Achievements:</span> @_unlocked <span class="games__container__game__content__stats__achievements__faded">/</span> @_total <span class="games__container__game__content__stats__achievements__percent">(@(((int)_percent).ToString())%)</span>
                        </p>
                    }
                </div>
            </div>
        </div>

        @if (Data.Achievements is not null)
        {
            <div class="games__container__game__achievements">
                @for (var x = 0; x < (Data.Achievements.Count > 1 ? 2 : Data.Achievements.Count); x++)
                {
                    <div class="games__container__game__achievements__achievement" unlocked="@Data.Achievements[x].Unlocked.ToString()">
                        <p class="games__container__game__achievements__achievement__title">@Data.Achievements[x].Title</p>
                        <p class="games__container__game__achievements__achievement__description">@Data.Achievements[x].Description</p>
                    </div>
                }
                <div class="games__container__game__achievements__show_all">
                    <button class="games__container__game__achievements__show_all__button button-nofancy" @onclick="ToggleAchievementsOpen">Show All Achievements</button>
                </div>
            </div>
            <Modal Closed="AchievementsClosed" Open="@_achievementsOpen">
                <div class="games__container__game__achievements__modal">
                    <p class="games__container__game__achievements__modal__title">@Data.Title</p>

                    <div class="games__container__game__achievements__modal__stats">
                        <p class="games__container__game__achievements__modal__stats__text">
                            <span><b>@_unlocked</b> of <b>@_total</b> achievements unlocked</span>
                            <span>(@(((int)_percent).ToString())%)</span>
                        </p>
                        <div class="games__container__game__achievements__modal__stats__progress">
                            <div class="games__container__game__achievements__modal__stats__progress__bar" style="width: @_percent%"></div>
                        </div>
                    </div>

                    <div class="games__container__game__achievements__modal__filter">
                        <div class="games__container__game__achievements__modal__filter__search" @onclick="OutsideDropdownClick">
                            <input @bind="_searchQuery" @bind:event="oninput" placeholder="Search" type="text">
                        </div>
                        <div class="games__container__game__achievements__modal__filter__dropdown" data-dropdown-open="@_dropdownOpen.ToString()">
                            <div class="games__container__game__achievements__modal__filter__dropdown__display" @onclick="ToggleDropdownOpen">
                                <span>Order By</span>
                                <svg fill="currentColor" height="24px" viewBox="0 -960 960 960" width="24px" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M120-240v-80h240v80H120Zm0-200v-80h480v80H120Zm0-200v-80h720v80H120Z"/>
                                </svg>
                                @* <svg fill="currentColor" height="24px" viewBox="0 -960 960 960" width="24px" xmlns="http://www.w3.org/2000/svg"> *@
                                @*     <path d="M440-120v-240h80v80h320v80H520v80h-80Zm-320-80v-80h240v80H120Zm160-160v-80H120v-80h160v-80h80v240h-80Zm160-80v-80h400v80H440Zm160-160v-240h80v80h160v80H680v80h-80Zm-480-80v-80h400v80H120Z"/> *@
                                @* </svg> *@
                            </div>
                            <div class="games__container__game__achievements__modal__filter__dropdown__content">
                                <div class="games__container__game__achievements__modal__filter__dropdown__content__bg"></div>
                                <div class="games__container__game__achievements__modal__filter__dropdown__content__outside_detect" @onclick="OutsideDropdownClick"></div>
                                <div class="games__container__game__achievements__modal__filter__dropdown__content__group">
                                    @* <div class="games__container__game__achievements__modal__filter__dropdown__content__group__title"> *@
                                    @*     <span>Order by:</span> *@
                                    @* </div> *@
                                    <div class="games__container__game__achievements__modal__filter__dropdown__content__group__option" data-option-selected="@(_currentSortOption.ToString() == "NameAscending" ? "True" : "False")" @onclick='() => ChangeSortOption((SortOption)Enum.Parse(typeof(SortOption), "NameAscending"))'>
                                        <span>Name A-Z</span>
                                    </div>
                                    <div class="games__container__game__achievements__modal__filter__dropdown__content__group__option" data-option-selected="@(_currentSortOption.ToString() == "NameDescending" ? "True" : "False")" @onclick='() => ChangeSortOption((SortOption)Enum.Parse(typeof(SortOption), "NameDescending"))'>
                                        <span>Name Z-A</span>
                                    </div>
                                    <div class="games__container__game__achievements__modal__filter__dropdown__content__group__option" data-option-selected="@(_currentSortOption.ToString() == "Unlocked" ? "True" : "False")" @onclick='() => ChangeSortOption((SortOption)Enum.Parse(typeof(SortOption), "Unlocked"))'>
                                        <span>Unlocked</span>
                                    </div>
                                    <div class="games__container__game__achievements__modal__filter__dropdown__content__group__option" data-option-selected="@(_currentSortOption.ToString() == "Locked" ? "True" : "False")" @onclick='() => ChangeSortOption((SortOption)Enum.Parse(typeof(SortOption), "Locked"))'>
                                        <span>Locked</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="games__container__game__achievements__modal__achievements">
                        @foreach (var achievement in SortedAchievements)
                        {
                            <div class="games__container__game__achievements__achievement" unlocked="@achievement.Unlocked.ToString()">
                                <p class="games__container__game__achievements__achievement__title">@achievement.Title</p>
                                <p class="games__container__game__achievements__achievement__description">@achievement.Description</p>
                            </div>
                        }
                    </div>
                </div>
            </Modal>
        }
    }
</div>